document.addEventListener('DOMContentLoaded', async function() { const galleryContainer = document.getElementById('gallery-container'); const categoryLabels = { fasady: 'fasady', koupelny: 'Koupelny', materialy: 'Materiály', interier: 'Interiér', izolacni: 'Izolační omítka' }; const data = await fetch('gallery-data.json').then(r => r.json()); for (const [cat, files] of Object.entries(data)) { files.forEach(src => { const div = document.createElement('div'); div.className = 'gallery-item'; div.dataset.category = cat; div.setAttribute('data-aos', 'zoom-in'); const img = document.createElement('img'); img.src = src; img.alt = cat; img.loading = 'lazy'; const overlay = document.createElement('div'); overlay.className = 'gallery-overlay'; overlay.innerHTML = `<h3 class="font-bold text-sm mb-1">${categoryLabels[cat]}</h3>`; div.appendChild(img); div.appendChild(overlay); galleryContainer.appendChild(div); }); } AOS.refresh(); const filterButtons = document.querySelectorAll('.filter-btn'); const galleryItems = document.querySelectorAll('.gallery-item'); const lightbox = document.getElementById('lightbox'); const lightboxImg = document.getElementById('lightbox-img'); const lightboxCurrent = document.getElementById('lightbox-current'); const lightboxTotal = document.getElementById('lightbox-total'); const lightboxClose = document.querySelector('.lightbox-close'); const lightboxPrev = document.querySelector('.lightbox-prev'); const lightboxNext = document.querySelector('.lightbox-next'); let currentImageIndex = 0; let visibleImages = []; filterButtons.forEach(button => { button.addEventListener('click', function() { const filter = this.getAttribute('data-filter'); filterButtons.forEach(btn => btn.classList.remove('active')); this.classList.add('active'); galleryItems.forEach(item => { const category = item.getAttribute('data-category'); if (filter === 'all' || category === filter) { item.style.display = 'block'; setTimeout(() => { item.style.opacity = '1'; item.style.transform = 'scale(1)'; }, 10); } else { item.style.opacity = '0'; item.style.transform = 'scale(0.8)'; setTimeout(() => { item.style.display = 'none'; }, 300); } }); updateVisibleImages(); }); }); function updateVisibleImages() { visibleImages = Array.from(galleryItems) .filter(item => item.style.display !== 'none') .map(item => ({ src: item.querySelector('img').src, alt: item.querySelector('img').alt })); lightboxTotal.textContent = visibleImages.length; } updateVisibleImages(); galleryItems.forEach((item) => { item.addEventListener('click', function() { if (this.style.display === 'none') return; const img = this.querySelector('img'); const visibleIndex = Array.from(galleryItems) .filter(it => it.style.display !== 'none') .indexOf(this); currentImageIndex = visibleIndex; lightboxImg.src = img.src; lightboxImg.alt = img.alt; lightboxCurrent.textContent = currentImageIndex + 1; lightbox.classList.add('active'); document.body.style.overflow = 'hidden'; }); }); function closeLightbox() { lightbox.classList.remove('active'); document.body.style.overflow = 'auto'; } lightboxClose.addEventListener('click', closeLightbox); lightbox.addEventListener('click', function(e) { if (e.target === lightbox) { closeLightbox(); } }); function showImage(index) { if (index >= 0 && index < visibleImages.length) { currentImageIndex = index; lightboxImg.src = visibleImages[currentImageIndex].src; lightboxImg.alt = visibleImages[currentImageIndex].alt; lightboxCurrent.textContent = currentImageIndex + 1; } } lightboxPrev.addEventListener('click', function() { showImage(currentImageIndex > 0 ? currentImageIndex - 1 : visibleImages.length - 1); }); lightboxNext.addEventListener('click', function() { showImage(currentImageIndex < visibleImages.length - 1 ? currentImageIndex + 1 : 0); }); document.addEventListener('keydown', function(e) { if (!lightbox.classList.contains('active')) return; switch(e.key) { case 'Escape': closeLightbox(); break; case 'ArrowLeft': lightboxPrev.click(); break; case 'ArrowRight': lightboxNext.click(); break; } }); const imageObserver = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { const img = entry.target; img.src = img.getAttribute('data-src') || img.src; img.classList.remove('lazy'); observer.unobserve(img); } }); }); document.querySelectorAll('img[loading="lazy"]').forEach(img => { imageObserver.observe(img); }); galleryItems.forEach(item => { const img = item.querySelector('img'); img.addEventListener('load', function() { this.style.opacity = '1'; }); }); });